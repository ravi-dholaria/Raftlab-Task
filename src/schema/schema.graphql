type Query {
  # User queries
  me: User

  # Room queries
  rooms: [Room!]
  messages(roomId: ID!): Room!
}

type Mutation {
  # Authentication
  signUp(input: InputUser!): AuthPayload!
  Login(email: String!, password: String!): AuthPayload!

  # Profile management
  updateUser(input: InputUser!): User!
  deleteUser: User!

  # Room management
  createRoom(name: String!): Room!
  joinRoom(name: String!): Room!
  leaveRoom(roomId: String!): Boolean

  # Message management
  sendMessage(roomId: String!, text: String!): Message!
}

input InputUser {
  name: String
  email: String
  password: String
}

type AuthPayload {
  token: String
  userId: String
}

type User @entity {
  _id: ID! @id
  name: String! @column
  email: String! @column
  password: String! @column
}

type Room @entity {
  _id: ID! @id
  name: String! @column
  messages: [Message!] @link
}
scalar DateTime

type Message @entity {
  _id: ID! @id
  text: String! @column
  user: User! @link
  room: Room! @link

  createdAt: DateTime! @column
}
